{"version":3,"sources":["../public/sw.js"],"names":["version","manifest","install","event","activate","keys","key","fetchFromCache","request","cachedResponse","response","return404","err"],"mappings":"AAkBA,MAAM,IAAU,OAOV,IAAW,unGAAqB,IAAI,CAAC,MAAM,kBAAkB,EAAE,GAAG;AAWxE,eAAe,IAAU;AAErB,SADc,MAAM,OAAO,KAAK,CAAO,GAC3B,OAAO,CAAQ,GAE3B,QAAQ,IAAI,uCAAuC,CAAO,EAAE;AAChE;AAEA,iBAAiB,WAAW,CAAC,MAAU;AACnC,EAAA,EAAM,UAAU,EAAO,CAAE;AAC7B,CAAC;AAWD,eAAe,IAAW;AACtB,QAAM,IAAO,MAAM,OAAO;AAC1B,QAAM,QAAQ,IAAI,EAAK,IAAI,CAAC,MAAQ,MAAQ,KAAW,OAAO,OAAO,CAAG,CAAC,CAAC,GAE1E,QAAQ,IAAI,4BAA4B;AAC5C;AAEA,iBAAiB,YAAY,CAAC,MAAU,EAAM,UAAU,EAAU,CAAA,CAAC;AAYnE,eAAe,EAAe,GAAS;AACnC,QAAM,IAAiB,MAAM,OAAO,MAAM,GAAS;AAAA,IAC/C,cAAc;AAAA,EACtB,CAAK;AACD,MAAI;AAEA,mBAAQ,IAAI,+BAA+B,EAAQ,GAAG,EAAE,GACjD;AAGX,UAAQ,IAAI,6BAA6B,EAAQ,GAAG,EAAE;AAEtD,QAAM,IAAW,MAAM,MAAM,CAAO,EAAE,MAAM,CAAS;AACrD,SAAI,EAAS,KACF,KAGX,QAAQ,IAAI,kCAAkC,EAAQ,GAAG,EAAE,GACpD,EAAU,eAAe;AACpC;AAEA;AAAA,EAAiB;AAAA,EAAS,CAAC,MACvB,EAAM,YAAY,EAAe,EAAM,OAAO,CAAC;AACnD;AAYA,eAAe,EAAU,GAAK;AAE1B,iBAAQ,IAAI,4BAA4B,CAAG,GAAG,GACvC,OAAO,MAAM,WAAW;AACnC","file":"sw.js","sourcesContent":["/*\n * SPDX-FileCopyrightText:  Copyright 2023 Roland Csaszar\n * SPDX-License-Identifier: AGPL-3.0-or-later\n *\n * Project:  Gregor\n * File:     sw.js\n * Date:     25.Oct.2023\n *\n * ==============================================================================\n */\n/* eslint-disable function-paren-newline */\n/* eslint-disable implicit-arrow-linebreak */\n\n/**\n * `version` is the name of the cache, including a timestamp.\n * This is filled by `gulp bundle` when copying `sw.js` to the directory `http`.\n */\n// eslint-disable-next-line no-undef\nconst version = \"BLA\";\n\n/**\n *  `manifest` is an array holding the paths to all files to cache.\n *  This is changed against the real list of files by the `vite-plugin-pwa`,\n *  configured in `../vite.config.ts`\n */\nconst manifest = VITE_PLUGIN_MANIFEST.map((e) => \"/Gregor/http/\" + e.url);\n\n/*\n * ==============================================================================\n *  Installation\n */\n\n/**\n * Install the service worker.\n * On installation, all files Parcel knows about are added to the cache.\n */\nasync function install() {\n    const cache = await caches.open(version);\n    await cache.addAll(manifest);\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] installed files to ${version}`);\n}\n\naddEventListener(\"install\", (event) => {\n    event.waitUntil(install());\n});\n\n/*\n * ==============================================================================\n *  Activation\n */\n\n/**\n * Activate service worker.\n * On activation all files from older versions of the cache are deleted.\n */\nasync function activate() {\n    const keys = await caches.keys();\n    await Promise.all(keys.map((key) => key !== version && caches.delete(key)));\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] activated`);\n}\n\naddEventListener(\"activate\", (event) => event.waitUntil(activate()));\n\n/*\n * ==============================================================================\n *  Fetching\n */\n\n/**\n * Fetches the given URL, either from cache or the server.\n * @param {RequestInfo} request The request to fulfill.\n * @returns {Response} The fetched URL as `Response`.\n */\nasync function fetchFromCache(request) {\n    const cachedResponse = await caches.match(request, {\n        ignoreSearch: true,\n    });\n    if (cachedResponse) {\n        // eslint-disable-next-line no-console\n        console.log(`[Service Worker] cache hit: ${request.url}`);\n        return cachedResponse;\n    }\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] fetching ${request.url}`);\n\n    const response = await fetch(request).catch(return404);\n    if (response.ok) {\n        return response;\n    }\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] haven't found ${request.url}`);\n    return return404(\"URL not found\");\n}\n\naddEventListener(\"fetch\", (event) =>\n    event.respondWith(fetchFromCache(event.request)),\n);\n\n/**\n * ==============================================================================\n *  Return the 404 error page.\n */\n\n/**\n * Return the 404 error page.\n * @param {string} err\n * @returns {Promise<Response | undefined>} The 404 HTML page if cached.\n */\nasync function return404(err) {\n    // eslint-disable-next-line no-console\n    console.log(`[Service Worker] Error: \"${err}\"`);\n    return caches.match(\"/404.html\");\n}\n"]}